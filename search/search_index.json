{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pymaplibregl","text":"<p>Pymaplibregl provides Python bindings for maplibre-gl-js.</p> <p>It integrates seamlessly into py-shiny.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code># Stable\npip install git+https://github.com/eodaGmbH/py-maplibregl\n\n# Dev\npip install git+https://github.com/eodaGmbH/py-maplibregl@dev\n</code></pre>"},{"location":"#basic-usage","title":"Basic usage","text":""},{"location":"#standalone","title":"Standalone","text":"<pre><code>import webbrowser\n\nfrom pymaplibregl import Layer, LayerType, Map, MapOptions\nfrom pymaplibregl.sources import GeoJSONSource\n\nvancouver_blocks = GeoJSONSource(\n    data=\"https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/geojson/vancouver-blocks.json\",\n)\n\nmap_options = MapOptions(center=(-123.1256, 49.24658), zoom=12, hash=True, pitch=35)\n\nm = Map(map_options)\nm.add_layer(\n    Layer(\n        type=LayerType.LINE,\n        source=vancouver_blocks,\n        paint={\"line-color\": \"white\"},\n    )\n)\n\ntemp_file = \"/tmp/pymaplibregl.html\"\n\nwith open(temp_file, \"w\") as f:\n    f.write(m.to_html(style=\"height: 800px;\"))\n\nwebbrowser.open(temp_file)\n</code></pre>"},{"location":"#shiny-integration","title":"Shiny integration","text":"<pre><code>from pymaplibregl import Map, MapContext, output_maplibregl, render_maplibregl\nfrom pymaplibregl.controls import Marker\nfrom shiny import App, reactive, ui\n\napp_ui = ui.page_fluid(\n    output_maplibregl(\"maplibre\", height=600),\n)\n\n\ndef server(input, output, session):\n    @render_maplibregl\n    def maplibre():\n        m = Map()\n        return m\n\n    @reactive.Effect\n    @reactive.event(input.maplibre)\n    async def coords():\n        async with MapContext(\"maplibre\") as m:\n            print(input.maplibre())\n            m.add_marker(Marker(lng_lat=input.maplibre()[\"coords\"].values()))\n\n\napp = App(app_ui, server)\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre>"},{"location":"api/basemaps/","title":"Basemaps","text":""},{"location":"api/basemaps/#pymaplibregl.basemaps.Carto","title":"<code>pymaplibregl.basemaps.Carto</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Carto basemap styles</p> <p>Attributes:</p> <ul> <li> <code>DARK_MATTER</code>         \u2013          <p>dark-matter</p> </li> <li> <code>POSITRON</code>         \u2013          <p>positron</p> </li> <li> <code>VOYAGER</code>         \u2013          <p>voyager</p> </li> <li> <code>POSITRON_NOLABELS</code>         \u2013          <p>positron-nolabels</p> </li> <li> <code>DARK_MATTER_NOLABELS</code>         \u2013          <p>dark-matter-nolabels</p> </li> <li> <code>VOYAGER_NOLABELS</code>         \u2013          <p>voyager-nolabels</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pymaplibregl import Map, MapOptions\n&gt;&gt;&gt; from pymaplibregl.basemaps import Carto\n</code></pre> <pre><code>&gt;&gt;&gt; map = Map(MapOptions(style=Carto.DARK_MATTER))\n</code></pre> Source code in <code>pymaplibregl/basemaps.py</code> <pre><code>class Carto(Enum):\n    \"\"\"Carto basemap styles\n\n    Attributes:\n        DARK_MATTER: dark-matter\n        POSITRON: positron\n        VOYAGER: voyager\n        POSITRON_NOLABELS: positron-nolabels\n        DARK_MATTER_NOLABELS: dark-matter-nolabels\n        VOYAGER_NOLABELS: voyager-nolabels\n\n    Examples:\n        &gt;&gt;&gt; from pymaplibregl import Map, MapOptions\n        &gt;&gt;&gt; from pymaplibregl.basemaps import Carto\n\n        &gt;&gt;&gt; map = Map(MapOptions(style=Carto.DARK_MATTER))\n    \"\"\"\n\n    DARK_MATTER = \"dark-matter\"\n    POSITRON = \"positron\"\n    VOYAGER = \"voyager\"\n    POSITRON_NOLABELS = \"positron-nolabels\"\n    DARK_MATTER_NOLABELS = \"dark-matter-nolabels\"\n    VOYAGER_NOLABELS = \"voyager-nolabels\"\n</code></pre>"},{"location":"api/controls/","title":"Markers and controls","text":""},{"location":"api/controls/#pymaplibregl.controls","title":"<code>pymaplibregl.controls</code>","text":"<p>Markers and controls</p> <p>See also https://docs.mapbox.com/mapbox-gl-js/api/markers/</p>"},{"location":"api/controls/#pymaplibregl.controls.ControlPosition","title":"<code>ControlPosition</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Control position</p> <p>Attributes:</p> Name Type Description <code>TOP_LEFT</code> <code>str</code> <p>top-left</p> <code>TOP_RIGHT</code> <code>str</code> <p>top-right</p> <code>BOTTOM_LEFT</code> <code>str</code> <p>bottom-left</p> <code>BOTTOM_RIGHT</code> <code>str</code> <p>bottom-right</p> Source code in <code>pymaplibregl/controls.py</code> <pre><code>class ControlPosition(Enum):\n    \"\"\"Control position\n\n    Attributes:\n        TOP_LEFT (str): top-left\n        TOP_RIGHT (str): top-right\n        BOTTOM_LEFT (str): bottom-left\n        BOTTOM_RIGHT (str): bottom-right\n    \"\"\"\n\n    TOP_LEFT = \"top-left\"\n    TOP_RIGHT = \"top-right\"\n    BOTTOM_LEFT = \"bottom-left\"\n    BOTTOM_RIGHT = \"bottom-right\"\n</code></pre>"},{"location":"api/controls/#pymaplibregl.controls.FullscreenControl","title":"<code>FullscreenControl</code>","text":"<p>             Bases: <code>Control</code></p> <p>Fullscreen control</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pymaplibregl import Map\n&gt;&gt;&gt; from pymaplibregl.controls import FullscreenControl, ControlPosition\n</code></pre> <pre><code>&gt;&gt;&gt; map = Map()\n&gt;&gt;&gt; map.add_control(FullscreenControl(), ControlPosition.BOTTOM_LEFT)\n</code></pre> Source code in <code>pymaplibregl/controls.py</code> <pre><code>class FullscreenControl(Control):\n    \"\"\"Fullscreen control\n\n    Examples:\n        &gt;&gt;&gt; from pymaplibregl import Map\n        &gt;&gt;&gt; from pymaplibregl.controls import FullscreenControl, ControlPosition\n\n        &gt;&gt;&gt; map = Map()\n        &gt;&gt;&gt; map.add_control(FullscreenControl(), ControlPosition.BOTTOM_LEFT)\n    \"\"\"\n\n    # _name: str = ControlType.FULLSCREEN.value\n    pass\n</code></pre>"},{"location":"api/controls/#pymaplibregl.controls.Marker","title":"<code>Marker</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Marker</p> <p>Attributes:</p> Name Type Description <code>lng_lat</code> <code>tuple | list</code> <p>Required. The longitude and latitude of the marker.</p> <code>popup</code> <code>Popup | dict</code> <p>The Popup that is displayed when a user clicks on the marker.</p> <code>options</code> <code>MarkerOptions | dict</code> <p>Marker options.</p> Source code in <code>pymaplibregl/controls.py</code> <pre><code>class Marker(BaseModel):\n    \"\"\"Marker\n\n    Attributes:\n        lng_lat (tuple |list): **Required.** The longitude and latitude of the marker.\n        popup (Popup | dict): The Popup that is displayed when a user clicks on the marker.\n        options (MarkerOptions | dict): Marker options.\n    \"\"\"\n\n    lng_lat: Union[tuple, list] = Field(None, serialization_alias=\"lngLat\")\n    popup: Union[Popup, dict] = None\n    options: Union[MarkerOptions, dict] = {}\n</code></pre>"},{"location":"api/controls/#pymaplibregl.controls.MarkerOptions","title":"<code>MarkerOptions</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Marker options</p> Source code in <code>pymaplibregl/controls.py</code> <pre><code>class MarkerOptions(BaseModel):\n    \"\"\"Marker options\"\"\"\n\n    anchor: str = None\n    color: str = None\n    draggable: bool = None\n    offset: Union[tuple, list] = None\n    pitch_alignment: str = Field(None, serialization_alias=\"pitchAlignment\")\n    rotation: int = None\n    rotation_alignment: str = Field(None, serialization_alias=\"rotationAlignment\")\n    scale: int = None\n</code></pre>"},{"location":"api/controls/#pymaplibregl.controls.Popup","title":"<code>Popup</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Popup</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>str</code> <p>The Text of the popup.</p> <code>options</code> <code>PopupOptions | dict</code> <p>Popup options.</p> Source code in <code>pymaplibregl/controls.py</code> <pre><code>class Popup(BaseModel):\n    \"\"\"Popup\n\n    Attributes:\n        text: The Text of the popup.\n        options (PopupOptions | dict): Popup options.\n    \"\"\"\n\n    text: str\n    options: Union[PopupOptions, dict] = {}\n</code></pre>"},{"location":"api/controls/#pymaplibregl.controls.PopupOptions","title":"<code>PopupOptions</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Popup options</p> Source code in <code>pymaplibregl/controls.py</code> <pre><code>class PopupOptions(BaseModel):\n    \"\"\"Popup options\"\"\"\n\n    anchor: str = None\n    close_button: bool = Field(False, serialization_alias=\"closeButton\")\n    close_on_click: bool = Field(None, serialization_alias=\"closeOnClick\")\n    close_on_move: bool = Field(None, serialization_alias=\"closeOnMove\")\n    max_width: int = Field(None, serialization_alias=\"maxWidth\")\n    offset: Union[int, list, dict] = None\n</code></pre>"},{"location":"api/layer/","title":"Layer","text":""},{"location":"api/layer/#pymaplibregl.Layer","title":"<code>pymaplibregl.Layer</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Layer properties</p> Notes <p>See layers for more details.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Required. The unique ID of the layer. Defaults to <code>str(uuid4())</code>.</p> <code>type</code> <code>str | LayerType</code> <p>Required. The type of the layer.</p> <code>filter</code> <code>list</code> <p>The filter expression that is applied to the source of the layer.</p> <code>layout</code> <code>dict</code> <p>The layout properties of the layer.</p> <code>max_zoom</code> <code>int</code> <p>The maximum zoom level for the layer.</p> <code>min_zoom</code> <code>int</code> <p>The minimum zoom level for the layer.</p> <code>paint</code> <code>dict</code> <p>The paint properties of the layer.</p> <code>source</code> <code>str | Source</code> <p>The name (unique ID) of a source or a source object to be used for the layer.</p> <code>source_layer</code> <code>str</code> <p>The layer to use from a vector tile source.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pymaplibregl.layer import Layer, LayerType\n</code></pre> <pre><code>&gt;&gt;&gt; layer = Layer(id=\"test-layer\", type=LayerType.CIRCLE, source=\"test-source\")\n</code></pre> Source code in <code>pymaplibregl/layer.py</code> <pre><code>class Layer(BaseModel):\n    \"\"\"Layer properties\n\n    Notes:\n        See [layers](https://maplibre.org/maplibre-style-spec/layers/) for more details.\n\n    Attributes:\n        id (str): **Required.** The unique ID of the layer. Defaults to `str(uuid4())`.\n        type (str | LayerType): **Required.** The type of the layer.\n        filter (list): The filter expression that is applied to the source of the layer.\n        layout (dict): The layout properties of the layer.\n        max_zoom (int): The maximum zoom level for the layer.\n        min_zoom (int): The minimum zoom level for the layer.\n        paint (dict): The paint properties of the layer.\n        source (str | Source): The name (unique ID) of a source or a source object to be used for the layer.\n        source_layer (str): The layer to use from a vector tile source.\n\n    Examples:\n        &gt;&gt;&gt; from pymaplibregl.layer import Layer, LayerType\n\n        &gt;&gt;&gt; layer = Layer(id=\"test-layer\", type=LayerType.CIRCLE, source=\"test-source\")\n    \"\"\"\n\n    id: str = str(uuid4())\n    type: LayerType\n    filter: list = None\n    layout: dict = None\n    max_zoom: int = Field(None, serialization_alias=\"maxzoom\")\n    metadata: dict = None\n    min_zoom: int = Field(None, serialization_alias=\"minzoom\")\n    paint: dict = None\n    source: Union[str, Source, dict, None] = None\n    source_layer: str = Field(None, serialization_alias=\"source-layer\")\n\n    @field_validator(\"source\")\n    def validate_source(cls, v):\n        if isinstance(v, Source):\n            return v.to_dict()\n\n        return v\n\n    @field_validator(\"paint\", \"layout\")\n    def fix_paint(cls, v):\n        if isinstance(v, dict):\n            return fix_keys(v)\n\n        return v\n</code></pre>"},{"location":"api/layer/#pymaplibregl.LayerType","title":"<code>pymaplibregl.LayerType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Rendering type of layer</p> <p>Attributes:</p> <ul> <li> <code>CIRCLE</code>         \u2013          <p>A filled circle.</p> </li> <li> <code>FILL</code>         \u2013          <p>A filled polygon with an optional stroked border.</p> </li> <li> <code>FILL_EXTRUSION</code>         \u2013          <p>An extruded polygon.</p> </li> <li> <code>LINE</code>         \u2013          <p>A stroked line.</p> </li> <li> <code>SYMBOL</code>         \u2013          <p>An icon or a text label.</p> </li> <li> <code>RASTER</code>         \u2013          <p>Raster map textures such as satellite imagery.</p> </li> <li> <code>HEATMAP</code>         \u2013          <p>A heatmap.</p> </li> <li> <code>HILLSHADE</code>         \u2013          <p>A Client-side hillshading visualization based on DEM data.</p> </li> <li> <code>BACKGROUND</code>         \u2013          <p>A background color or pattern.</p> </li> </ul> Source code in <code>pymaplibregl/layer.py</code> <pre><code>class LayerType(Enum):\n    \"\"\"Rendering type of layer\n\n    Attributes:\n        CIRCLE: A filled circle.\n        FILL: A filled polygon with an optional stroked border.\n        FILL_EXTRUSION: An extruded polygon.\n        LINE: A stroked line.\n        SYMBOL: An icon or a text label.\n        RASTER: Raster map textures such as satellite imagery.\n        HEATMAP: A heatmap.\n        HILLSHADE: A Client-side hillshading visualization based on DEM data.\n        BACKGROUND: A background color or pattern.\n    \"\"\"\n\n    CIRCLE = \"circle\"\n    FILL = \"fill\"\n    FILL_EXTRUSION = \"fill-extrusion\"\n    LINE = \"line\"\n    SYMBOL = \"symbol\"\n    RASTER = \"raster\"\n    HEATMAP = \"heatmap\"\n    HILLSHADE = \"hillshade\"\n    BACKGROUND = \"background\"\n</code></pre>"},{"location":"api/map/","title":"Map","text":""},{"location":"api/map/#pymaplibregl.Map","title":"<code>pymaplibregl.Map</code>","text":"<p>             Bases: <code>object</code></p> <p>Map</p> <p>Parameters:</p> Name Type Description Default <code>map_options</code> <code>MapOptions</code> <p>Map options.</p> <code>MapOptions()</code> <code>**kwargs</code> <p>Keyword arguments that are appended to the <code>MapOptions</code> object.</p> <code>{}</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pymaplibregl.map import Map, MapOptions\n</code></pre> <pre><code>&gt;&gt;&gt; map_options = MapOptions(center=(9.5, 51.31667), zoom=8)\n&gt;&gt;&gt; map = Map(map_options)\n&gt;&gt;&gt; dict(map)\n{'mapOptions': {'center': (9.5, 51.31667), 'style': 'https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json', 'zoom': 8}, 'calls': []}\n</code></pre> Source code in <code>pymaplibregl/map.py</code> <pre><code>class Map(object):\n    \"\"\"Map\n\n    Args:\n        map_options (MapOptions): Map options.\n        **kwargs: Keyword arguments that are appended to the `MapOptions` object.\n\n    Examples:\n        &gt;&gt;&gt; from pymaplibregl.map import Map, MapOptions\n\n        &gt;&gt;&gt; map_options = MapOptions(center=(9.5, 51.31667), zoom=8)\n        &gt;&gt;&gt; map = Map(map_options)\n        &gt;&gt;&gt; dict(map)\n        {'mapOptions': {'center': (9.5, 51.31667), 'style': 'https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json', 'zoom': 8}, 'calls': []}\n    \"\"\"\n\n    MESSAGE = \"not implemented yet\"\n\n    def __init__(self, map_options: MapOptions = MapOptions(), **kwargs):\n        self._map_options = map_options.to_dict() | kwargs\n        self._calls = []\n\n    def __iter__(self):\n        for k, v in self.to_dict().items():\n            yield k, v\n\n    def to_dict(self) -&gt; dict:\n        return {\"mapOptions\": self._map_options, \"calls\": self._calls}\n\n    @property\n    def sources(self) -&gt; list:\n        return [item[\"data\"] for item in self._calls if item[\"name\"] == \"addSource\"]\n\n    @property\n    def layers(self) -&gt; list:\n        return [item[\"data\"] for item in self._calls if item[\"name\"] == \"addLayer\"]\n\n    # TODO: Rename to add_map_call\n    def add_call(self, func_name: str, params: list) -&gt; None:\n        self._calls.append(\n            {\"name\": \"applyFunc\", \"data\": {\"funcName\": func_name, \"params\": params}}\n        )\n\n    def add_control(\n        self,\n        control: Control,\n        position: [str | ControlPosition] = ControlPosition.TOP_RIGHT,\n    ) -&gt; None:\n        \"\"\"Add a control to the map\n\n        Args:\n            control (Control): The control to be add to the map.\n            position (str | ControlPosition): The position of the control.\n        \"\"\"\n        data = {\n            \"type\": control.type,\n            \"options\": control.to_dict(),\n            \"position\": ControlPosition(position).value,\n        }\n        self._calls.append({\"name\": \"addControl\", \"data\": data})\n\n    def add_source(self, id: str, source: [Source | dict]) -&gt; None:\n        \"\"\"Add a source to the map\"\"\"\n        if isinstance(source, Source):\n            source = source.to_dict()\n\n        self._calls.append({\"name\": \"addSource\", \"data\": {\"id\": id, \"source\": source}})\n\n    def add_layer(self, layer: [Layer | dict]) -&gt; None:\n        \"\"\"Add a layer to the map\n\n        Args:\n            layer (Layer | dict): The Layer to be added to the map.\n        \"\"\"\n        if isinstance(layer, Layer):\n            layer = layer.to_dict()\n\n        self._calls.append({\"name\": \"addLayer\", \"data\": layer})\n\n    def add_marker(self, marker: Marker) -&gt; None:\n        \"\"\"Add a marker to the map\n\n        Args:\n            marker (Marker): The marker to be added to the map.\n        \"\"\"\n        self._calls.append({\"name\": \"addMarker\", \"data\": marker.to_dict()})\n\n    def add_popup(self, layer_id: str, prop: str) -&gt; None:\n        \"\"\"Add a popup to the map\"\"\"\n        self._calls.append(\n            {\"name\": \"addPopup\", \"data\": {\"layerId\": layer_id, \"property\": prop}}\n        )\n\n    def set_filter(self, layer_id: str, filter_: list):\n        \"\"\"Update the filter of a layer\n\n        Args:\n            layer_id (str): The name of the layer to be updated.\n            filter_ (list): The filter expression that is applied to the source of the layer.\n        \"\"\"\n        self.add_call(\"setFilter\", [layer_id, filter_])\n\n    def set_paint_property(self, layer_id: str, prop: str, value: any) -&gt; None:\n        \"\"\"Update the paint property of a layer\n\n        Args:\n            layer_id (str): The name of the layer to be updated.\n            prop (str): The name of the paint property to be updated.\n            value (any): The new value of the paint property.\n        \"\"\"\n        self.add_call(\"setPaintProperty\", [layer_id, prop, value])\n\n    def set_layout_property(self, layer_id: str, prop: str, value: any) -&gt; None:\n        \"\"\"Update a layout property of a layer\n\n        Args:\n            layer_id (str): The name of the layer to be updated.\n            prop (str): The name of the layout property to be updated.\n            value (any): The new value of the layout property.\n        \"\"\"\n        self.add_call(\"setLayoutProperty\", [layer_id, prop, value])\n\n    def to_html(self, **kwargs) -&gt; str:\n        \"\"\"Render to html\n\n        Args:\n            **kwargs (Any): Additional keyword arguments that are passed to the template.\n                Currently, `style` is the only supported keyword argument.\n\n        Examples:\n            &gt;&gt;&gt; from pymaplibregl import Map\n\n            &gt;&gt;&gt; map = Map()\n            &gt;&gt;&gt; with open(\"/tmp/map.html\", \"w\") as f:\n            ...     f.write(map.to_html(style=\"height: 800px;\")\n        \"\"\"\n        js_lib = read_internal_file(\"srcjs\", \"index.js\")\n        js_snippet = Template(js_template).render(data=json.dumps(self.to_dict()))\n        output = Template(html_template).render(\n            js=\"\\n\".join([js_lib, js_snippet]), **kwargs\n        )\n        return output\n</code></pre>"},{"location":"api/map/#pymaplibregl.Map.add_control","title":"<code>add_control(control, position=ControlPosition.TOP_RIGHT)</code>","text":"<p>Add a control to the map</p> <p>Parameters:</p> Name Type Description Default <code>control</code> <code>Control</code> <p>The control to be add to the map.</p> required <code>position</code> <code>str | ControlPosition</code> <p>The position of the control.</p> <code>TOP_RIGHT</code> Source code in <code>pymaplibregl/map.py</code> <pre><code>def add_control(\n    self,\n    control: Control,\n    position: [str | ControlPosition] = ControlPosition.TOP_RIGHT,\n) -&gt; None:\n    \"\"\"Add a control to the map\n\n    Args:\n        control (Control): The control to be add to the map.\n        position (str | ControlPosition): The position of the control.\n    \"\"\"\n    data = {\n        \"type\": control.type,\n        \"options\": control.to_dict(),\n        \"position\": ControlPosition(position).value,\n    }\n    self._calls.append({\"name\": \"addControl\", \"data\": data})\n</code></pre>"},{"location":"api/map/#pymaplibregl.Map.add_layer","title":"<code>add_layer(layer)</code>","text":"<p>Add a layer to the map</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>Layer | dict</code> <p>The Layer to be added to the map.</p> required Source code in <code>pymaplibregl/map.py</code> <pre><code>def add_layer(self, layer: [Layer | dict]) -&gt; None:\n    \"\"\"Add a layer to the map\n\n    Args:\n        layer (Layer | dict): The Layer to be added to the map.\n    \"\"\"\n    if isinstance(layer, Layer):\n        layer = layer.to_dict()\n\n    self._calls.append({\"name\": \"addLayer\", \"data\": layer})\n</code></pre>"},{"location":"api/map/#pymaplibregl.Map.add_marker","title":"<code>add_marker(marker)</code>","text":"<p>Add a marker to the map</p> <p>Parameters:</p> Name Type Description Default <code>marker</code> <code>Marker</code> <p>The marker to be added to the map.</p> required Source code in <code>pymaplibregl/map.py</code> <pre><code>def add_marker(self, marker: Marker) -&gt; None:\n    \"\"\"Add a marker to the map\n\n    Args:\n        marker (Marker): The marker to be added to the map.\n    \"\"\"\n    self._calls.append({\"name\": \"addMarker\", \"data\": marker.to_dict()})\n</code></pre>"},{"location":"api/map/#pymaplibregl.Map.add_popup","title":"<code>add_popup(layer_id, prop)</code>","text":"<p>Add a popup to the map</p> Source code in <code>pymaplibregl/map.py</code> <pre><code>def add_popup(self, layer_id: str, prop: str) -&gt; None:\n    \"\"\"Add a popup to the map\"\"\"\n    self._calls.append(\n        {\"name\": \"addPopup\", \"data\": {\"layerId\": layer_id, \"property\": prop}}\n    )\n</code></pre>"},{"location":"api/map/#pymaplibregl.Map.add_source","title":"<code>add_source(id, source)</code>","text":"<p>Add a source to the map</p> Source code in <code>pymaplibregl/map.py</code> <pre><code>def add_source(self, id: str, source: [Source | dict]) -&gt; None:\n    \"\"\"Add a source to the map\"\"\"\n    if isinstance(source, Source):\n        source = source.to_dict()\n\n    self._calls.append({\"name\": \"addSource\", \"data\": {\"id\": id, \"source\": source}})\n</code></pre>"},{"location":"api/map/#pymaplibregl.Map.set_filter","title":"<code>set_filter(layer_id, filter_)</code>","text":"<p>Update the filter of a layer</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>The name of the layer to be updated.</p> required <code>filter_</code> <code>list</code> <p>The filter expression that is applied to the source of the layer.</p> required Source code in <code>pymaplibregl/map.py</code> <pre><code>def set_filter(self, layer_id: str, filter_: list):\n    \"\"\"Update the filter of a layer\n\n    Args:\n        layer_id (str): The name of the layer to be updated.\n        filter_ (list): The filter expression that is applied to the source of the layer.\n    \"\"\"\n    self.add_call(\"setFilter\", [layer_id, filter_])\n</code></pre>"},{"location":"api/map/#pymaplibregl.Map.set_layout_property","title":"<code>set_layout_property(layer_id, prop, value)</code>","text":"<p>Update a layout property of a layer</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>The name of the layer to be updated.</p> required <code>prop</code> <code>str</code> <p>The name of the layout property to be updated.</p> required <code>value</code> <code>any</code> <p>The new value of the layout property.</p> required Source code in <code>pymaplibregl/map.py</code> <pre><code>def set_layout_property(self, layer_id: str, prop: str, value: any) -&gt; None:\n    \"\"\"Update a layout property of a layer\n\n    Args:\n        layer_id (str): The name of the layer to be updated.\n        prop (str): The name of the layout property to be updated.\n        value (any): The new value of the layout property.\n    \"\"\"\n    self.add_call(\"setLayoutProperty\", [layer_id, prop, value])\n</code></pre>"},{"location":"api/map/#pymaplibregl.Map.set_paint_property","title":"<code>set_paint_property(layer_id, prop, value)</code>","text":"<p>Update the paint property of a layer</p> <p>Parameters:</p> Name Type Description Default <code>layer_id</code> <code>str</code> <p>The name of the layer to be updated.</p> required <code>prop</code> <code>str</code> <p>The name of the paint property to be updated.</p> required <code>value</code> <code>any</code> <p>The new value of the paint property.</p> required Source code in <code>pymaplibregl/map.py</code> <pre><code>def set_paint_property(self, layer_id: str, prop: str, value: any) -&gt; None:\n    \"\"\"Update the paint property of a layer\n\n    Args:\n        layer_id (str): The name of the layer to be updated.\n        prop (str): The name of the paint property to be updated.\n        value (any): The new value of the paint property.\n    \"\"\"\n    self.add_call(\"setPaintProperty\", [layer_id, prop, value])\n</code></pre>"},{"location":"api/map/#pymaplibregl.Map.to_html","title":"<code>to_html(**kwargs)</code>","text":"<p>Render to html</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments that are passed to the template. Currently, <code>style</code> is the only supported keyword argument.</p> <code>{}</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pymaplibregl import Map\n</code></pre> <pre><code>&gt;&gt;&gt; map = Map()\n&gt;&gt;&gt; with open(\"/tmp/map.html\", \"w\") as f:\n...     f.write(map.to_html(style=\"height: 800px;\")\n</code></pre> Source code in <code>pymaplibregl/map.py</code> <pre><code>def to_html(self, **kwargs) -&gt; str:\n    \"\"\"Render to html\n\n    Args:\n        **kwargs (Any): Additional keyword arguments that are passed to the template.\n            Currently, `style` is the only supported keyword argument.\n\n    Examples:\n        &gt;&gt;&gt; from pymaplibregl import Map\n\n        &gt;&gt;&gt; map = Map()\n        &gt;&gt;&gt; with open(\"/tmp/map.html\", \"w\") as f:\n        ...     f.write(map.to_html(style=\"height: 800px;\")\n    \"\"\"\n    js_lib = read_internal_file(\"srcjs\", \"index.js\")\n    js_snippet = Template(js_template).render(data=json.dumps(self.to_dict()))\n    output = Template(html_template).render(\n        js=\"\\n\".join([js_lib, js_snippet]), **kwargs\n    )\n    return output\n</code></pre>"},{"location":"api/map/#pymaplibregl.MapOptions","title":"<code>pymaplibregl.MapOptions</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Map options</p> Note <p>See mapOptions for more details.</p> Source code in <code>pymaplibregl/map.py</code> <pre><code>class MapOptions(BaseModel):\n    \"\"\"Map options\n\n    Note:\n        See [mapOptions](https://maplibre.org/maplibre-gl-js/docs/API/types/maplibregl.MapOptions/) for more details.\n    \"\"\"\n\n    model_config = ConfigDict(\n        validate_assignment=True, extra=\"forbid\", use_enum_values=False\n    )\n    antialias: bool = None\n    attribution_control: bool = Field(None, serialization_alias=\"attributionControl\")\n    bearing: int = None\n    bearing_snap: int = Field(None, serialization_alias=\"bearingSnap\")\n    bounds: tuple = None\n    box_zoom: bool = Field(None, serialization_alias=\"boxZoom\")\n    center: tuple = None\n    click_tolerance: int = Field(None, serialization_alias=\"clickTolerance\")\n    custom_attribution: bool = Field(None, serialization_alias=\"customAttribution\")\n    double_click_zoom: bool = Field(None, serialization_alias=\"doubleClickZoom\")\n    fade_duration: int = Field(None, serialization_alias=\"fadeDuration\")\n    fit_bounds_options: dict = Field(None, serialization_alias=\"fitBoundsOptions\")\n    hash: Union[bool, str] = None\n    interactive: bool = None\n    keyword: bool = None\n    max_bounds: tuple = Field(None, serialization_alias=\"maxBounds\")\n    max_pitch: int = Field(None, serialization_alias=\"maxPitch\")\n    max_zoom: int = Field(None, serialization_alias=\"maxZoom\")\n    min_pitch: int = Field(None, serialization_alias=\"minPitch\")\n    min_zoom: int = Field(None, serialization_alias=\"minZoom\")\n    pitch: int = None\n    scroll_zoom: bool = Field(None, serialization_alias=\"scrollZoom\")\n    style: Union[str, Carto] = construct_carto_basemap_url(Carto.DARK_MATTER)\n    zoom: int = None\n\n    @field_validator(\"style\")\n    def validate_style(cls, v):\n        if isinstance(v, Carto):\n            return construct_carto_basemap_url(v)\n\n        return v\n</code></pre>"},{"location":"api/sources/","title":"Sources","text":""},{"location":"api/sources/#pymaplibregl.sources","title":"<code>pymaplibregl.sources</code>","text":""},{"location":"api/sources/#pymaplibregl.sources.GeoJSONSource","title":"<code>GeoJSONSource</code>","text":"<p>             Bases: <code>Source</code></p> <p>GeoJSON Source</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pymaplibregl.sources import GeoJSONSource\n</code></pre> <pre><code>&gt;&gt;&gt; source = GeoJSONSource(data=\"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\")\n</code></pre> Source code in <code>pymaplibregl/sources.py</code> <pre><code>class GeoJSONSource(Source):\n    \"\"\"GeoJSON Source\n\n    Examples:\n        &gt;&gt;&gt; from pymaplibregl.sources import GeoJSONSource\n\n        &gt;&gt;&gt; source = GeoJSONSource(data=\"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\")\n    \"\"\"\n\n    data: Union[str, dict]\n    attribution: str = None\n    buffer: int = None\n    cluster: bool = None\n    cluster_max_zoom: int = Field(None, serialization_alias=\"clusterMaxZoom\")\n    cluster_min_points: int = Field(None, serialization_alias=\"clusterMinPoints\")\n    cluster_properties: dict = Field(None, serialization_alias=\"clusterProperties\")\n    cluster_radius: int = Field(None, serialization_alias=\"clusterRadius\")\n    filter: list = None\n    generate_id: bool = Field(None, serialization_alias=\"generateId\")\n    line_metrics: bool = Field(None, serialization_alias=\"lineMetrics\")\n    maxzoom: int = None\n    promote_id: Union[str, dict] = Field(None, serialization_alias=\"promoteId\")\n    tolerance: float = None\n\n    @computed_field\n    @property\n    def type(self) -&gt; str:\n        return SourceType.GEOJSON.value\n</code></pre>"},{"location":"api/sources/#pymaplibregl.sources.SourceType","title":"<code>SourceType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Source types</p> Source code in <code>pymaplibregl/sources.py</code> <pre><code>class SourceType(Enum):\n    \"\"\"Source types\"\"\"\n\n    RASTER = \"raster\"\n    VECTOR = \"vector\"\n    RASTER_DEM = \"raster-dem\"\n    GEOJSON = \"geojson\"\n    IMAGE = \"image\"\n    VIDEO = \"video\"\n</code></pre>"},{"location":"examples/airports/","title":"Airport markers","text":"<pre><code>import pandas as pd\nfrom pymaplibregl import (\n    Layer,\n    LayerType,\n    Map,\n    MapOptions,\n    output_maplibregl,\n    render_maplibregl,\n)\nfrom pymaplibregl.basemaps import Carto\nfrom pymaplibregl.controls import Marker, MarkerOptions, Popup, PopupOptions\nfrom pymaplibregl.sources import GeoJSONSource\nfrom pymaplibregl.utils import GeometryType, df_to_geojson\nfrom shiny import App, ui\n\nBOUNDS = (-8.92242886, 43.30508298, 13.76496714, 59.87668996)\n\nairports_data = pd.read_json(\n    \"https://github.com/visgl/deck.gl-data/raw/master/examples/line/airports.json\"\n)\n\n\ndef get_color(airport_type: str) -&gt; str:\n    color = \"darkblue\"\n    if airport_type == \"mid\":\n        color = \"darkred\"\n    elif airport_type == \"major\":\n        color = \"darkgreen\"\n\n    return color\n\n\ngeojson = df_to_geojson(\n    airports_data,\n    \"coordinates\",\n    GeometryType.POINT,\n    properties=[\"type\", \"name\", \"abbrev\"],\n)\n\nairport_circles = Layer(\n    type=LayerType.CIRCLE,\n    source=GeoJSONSource(data=geojson),\n    paint={\n        \"circle-color\": [\n            \"match\",\n            [\"get\", \"type\"],\n            \"mid\",\n            \"darkred\",\n            \"major\",\n            \"darkgreen\",\n            \"darkblue\",\n        ],\n        \"circle_radius\": 10,\n        \"circle-opacity\": 0.3,\n    },\n)\n\nmap_options = MapOptions(\n    style=Carto.POSITRON,\n    bounds=BOUNDS,\n    fit_bounds_options={\"padding\": 20},\n    hash=True,\n)\n\npopup_options = PopupOptions(close_button=False)\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Airports\"),\n    output_maplibregl(\"maplibre\", height=600),\n)\n\n\ndef server(input, output, session):\n    @render_maplibregl\n    async def maplibre():\n        m = Map(map_options)\n        for _, r in airports_data.iterrows():\n            marker = Marker(\n                lng_lat=r[\"coordinates\"],\n                options=MarkerOptions(color=get_color(r[\"type\"])),\n                popup=Popup(\n                    text=r[\"name\"],\n                    options=popup_options,\n                ),\n            )\n            m.add_marker(marker)\n        m.add_layer(airport_circles)\n        return m\n\n\napp = App(app_ui, server)\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>Run example:</p> <pre><code>poetry run uvicorn docs.examples.airports.app:app --reload\n</code></pre>"},{"location":"examples/earthquake_clusters/","title":"Earthquake clusters","text":"<pre><code>from pymaplibregl import (\n    Layer,\n    LayerType,\n    Map,\n    MapOptions,\n    output_maplibregl,\n    render_maplibregl,\n)\nfrom pymaplibregl.basemaps import Carto\nfrom pymaplibregl.sources import GeoJSONSource\nfrom shiny import App, reactive, ui\n\nEARTHQUAKE_SOURCE = \"earthquakes\"\nEARTHQUAKE_CIRCLES = \"earthquake-circles\"\nEARTHQUAKE_CLUSTERS = \"earthquake-clusters\"\nEARTHQUAKE_LABELS = \"earthquake-labels\"\n\nCENTER = (-118.0931, 33.78615)\n\nearthquakes_source = GeoJSONSource(\n    data=\"https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson\",\n    cluster=True,\n    cluster_radius=50,\n    cluster_min_points=2,\n    cluster_max_zoom=14,\n    cluster_properties={\n        \"maxMag\": [\"max\", [\"get\", \"mag\"]],\n        \"minMag\": [\"min\", [\"get\", \"mag\"]],\n    },\n)\n\nearthquake_circles = Layer(\n    type=LayerType.CIRCLE,\n    id=EARTHQUAKE_CIRCLES,\n    source=EARTHQUAKE_SOURCE,\n    paint={\"circle-color\": \"darkblue\"},\n    filter=[\"!\", [\"has\", \"point_count\"]],\n)\n\nearthquake_clusters = Layer(\n    type=LayerType.CIRCLE,\n    id=EARTHQUAKE_CLUSTERS,\n    source=EARTHQUAKE_SOURCE,\n    filter=[\"has\", \"point_count\"],\n    paint={\n        \"circle-color\": [\n            \"step\",\n            [\"get\", \"point_count\"],\n            \"#51bbd6\",\n            100,\n            \"#f1f075\",\n            750,\n            \"#f28cb1\",\n        ],\n        \"circle-radius\": [\"step\", [\"get\", \"point_count\"], 20, 100, 30, 750, 40],\n    },\n)\n\nearthquake_labels = Layer(\n    type=LayerType.SYMBOL,\n    id=\"text\",\n    source=EARTHQUAKE_SOURCE,\n    filter=[\"has\", \"point_count\"],\n    layout={\n        \"text-field\": [\"get\", \"point_count_abbreviated\"],\n        \"text-size\": 12,\n    },\n)\n\nmap_options = MapOptions(style=Carto.POSITRON, center=CENTER, zoom=3, hash=True)\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Earthquakes Cluster\"),\n    output_maplibregl(\"maplibre\", height=500),\n)\n\n\ndef server(input, output, session):\n    @render_maplibregl\n    async def maplibre():\n        m = Map(map_options)\n        m.add_source(EARTHQUAKE_SOURCE, earthquakes_source)\n        m.add_layer(earthquake_clusters)\n        m.add_layer(earthquake_circles)\n        m.add_popup(EARTHQUAKE_CLUSTERS, \"maxMag\")\n        m.add_layer(earthquake_labels)\n        return m\n\n    @reactive.Effect\n    @reactive.event(input.maplibre)\n    async def result():\n        print(f\"result: {input.maplibre()}\")\n\n\napp = App(app_ui, server)\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>Run example:</p> <pre><code>poetry run uvicorn docs.examples.earthquake_clusters.app:app --reload\n</code></pre>"},{"location":"examples/every_person_in_manhattan/","title":"Every person in manhattan","text":"<pre><code>import json\n\nimport pandas as pd\nimport shapely\nfrom pymaplibregl import (\n    Layer,\n    LayerType,\n    Map,\n    MapContext,\n    MapOptions,\n    output_maplibregl,\n    render_maplibregl,\n)\nfrom pymaplibregl.basemaps import Carto\nfrom pymaplibregl.sources import GeoJSONSource\nfrom pymaplibregl.utils import df_to_geojson\nfrom shiny import App, reactive, ui\n\nMALE_COLOR = \"rgb(0, 128, 255)\"\nFEMALE_COLOR = \"rgb(255, 0, 128)\"\nLAYER_ID = \"every-person-in-manhattan-circles\"\nCIRCLE_RADIUS = 2\n\npoint_data = pd.read_json(\n    \"https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/scatterplot/manhattan.json\"\n)\n\npoint_data.columns = [\"lng\", \"lat\", \"sex\"]\n\nevery_person_in_manhattan_source = GeoJSONSource(\n    data=df_to_geojson(point_data, properties=[\"sex\"]),\n)\n\nbbox = shapely.bounds(\n    shapely.from_geojson(json.dumps(every_person_in_manhattan_source.data))\n)\n\nevery_person_in_manhattan_circles = Layer(\n    type=LayerType.CIRCLE,\n    id=LAYER_ID,\n    source=every_person_in_manhattan_source,\n    paint={\n        \"circle-color\": [\"match\", [\"get\", \"sex\"], 1, MALE_COLOR, FEMALE_COLOR],\n        \"circle-radius\": CIRCLE_RADIUS,\n    },\n)\n\nmap_options = MapOptions(\n    style=Carto.POSITRON,\n    bounds=tuple(bbox),\n    fit_bounds_options={\"padding\": 20},\n)\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Every Person in Manhattan\"),\n    output_maplibregl(\"maplibre\", height=600),\n    ui.input_slider(\"radius\", \"Radius\", value=CIRCLE_RADIUS, min=1, max=5),\n)\n\n\ndef server(input, output, session):\n    @render_maplibregl\n    async def maplibre():\n        m = Map(map_options)\n        m.add_layer(every_person_in_manhattan_circles)\n        return m\n\n    @reactive.Effect\n    @reactive.event(input.radius, ignore_init=True)\n    async def radius():\n        async with MapContext(\"maplibre\") as m:\n            m.set_paint_property(LAYER_ID, \"circle-radius\", input.radius())\n\n\napp = App(app_ui, server)\n\nif __name__ == \"__main__\":\n    app.run()\n</code></pre> <p>Run example:</p> <pre><code>poetry run uvicorn docs.examples.every_person_in_manhattan.app:app --reload\n</code></pre>"}]}